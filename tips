//tips
//============================================================
// Part 1: Linux / Petalinux
//============================================================
1. edit path
    export PATH=$PATH:/bin
	
2. lsattr: extra attributes
chattr +a : can only add data to this file
chattr +i : can not read, delete, add data to this file
	
	
3. provide permission for some appication - SUID
    mkdir /var/run/console
    touch /var/run/console/yourusername
    chmod +s /sbin/reboot
    chmod +s /sbin/halt
    
    #enable suid
    chmod +s /bin/su
	
4. login welcome interface
	(1) before login
	$ vi /etc/issue
	/////////////////////////////////////////////
	// Welcome to use Xilinx ZC706!
	// Date: \d \t
	// Kernel: \r on an \m
	////////////////////////////////////////////
	(2) after login
	$ vi /etc/motd
	////////////////////////////////////////////////////////////////////////////
	// Welcome to Xilinx ZC706! ^_^
	// Build with Petalinux v2015.4(yocto 1.8)
	// Kernel: 4.0.0-xilinx on armv7
	///////////////////////////////////////////////////////////////////////////

	
5. login bash - PATH; MAIL; USER; HISTSIZE
	$ vi /etc/profile  # all users
	$ vi ~/.profile    # user's own profile
    
3. automatically mount devices
    e.g. /etc/fstab
    /dev/mmcblk0p1  /mnt    auto    defaults,sync,noauto    0   0 (P236)
4. (1) tar - extract files
    tar -xvzf filename.tar.gz (.tgz)
    tar -vxjf filename.tar.bz2
    tar -J -xvf filename.tar.xz
   (2) tar - compress files
    tar czf name_of_archive_file.tar.gz name_of_directory_to_tar
    
5. change date and time
    date -s "2017-01-17 16:50:00"
 
6. configure: error: no acceptable ld found in $PATH
    $ $ld
    $ export LD=ld
    
7. error: could not determine ar interface
   
 
5. chmod +x filename.sh
   sh ./filename.sh 
    
5.  $ chown <group> <file>
    $ chown :<group> <file>

6. adduser:
    $ adduser -G kmem hj424
    /etc/passwd
    /etc/shadow
    /etc/group
    /home
    
    
 7. chmod 755 /
 
 chmod 770 second user cannot login: segfault!?
 
 Modify color of echoed INFOs in command line
 http://webhome.csc.uvic.ca/~sae/seng265/fall04/tips/s265s047-tips/bash-using-colors.html
 
//============================================================
// Part 2: SDSoC
//============================================================
1. build - SDRelease - best runtime performance (reason: -O3)

2. hardware interface type ug1027 Chapter 6: A programmer's guide to Vivado HLS - P43
AXI: Advanced eXtensible Interface

SDSoC pragmas for building hardware & software interface
(1) #pragma SDS data data_mover(arg:dm)
    dm: AXIDMA_SG, AXIDMA_SIMPLE, AXIDMA_2D, or AXI_FIFO; arg: array name
(2) #pragma SDS data sys_port(arg:port)
    port: ACP or AFI; arg: array name    
    ACP: Processor and Hardware function access the same fast cache memory as shared memory. Hardware guarantee!
    AFI: Driver must flush cache to DDR before Hardware function can read the data from DDR. Software - programmer's work!
// In general, SDSoC compiler will automatically choose data mover type and system port by the "memory contiguity" and "array size"
// There are several general methods to specify the memory contiguity and array size
(1) Most intuitive one:
    a. #pragma SDS data mem_attribute(arg:contiguity|cache)
    contiguity: PHYSICAL_CONTIGUOUS or NON_PHYSICAL_CONTIGUOUS; cache: CACHEABLE or NON_CACHEABLE.
    b. #pragma SDS data copy(arg[offset:size])
    arg: array name; offset: 0 in common; size: array size
(2) SDSoC memory allocation: sds_alloc(size_t size); // guarantees physically contiguous memory
    different with malloc in C
(3) Special shared memory access: zero copy  (memcpy??????)
    #pragma SDS data zero_copy(A[0:<array_size>]) // array_size = number of elements
    Contiguous physical memory required
//// Finally, it is better to choose the apporpriate data access pattern
*** #pragma SDS data access_pattern(arg:pattern)
    arg: array name; pattern: SEQUENTIAL or RANDOM. (RANDOM is the default setting.)
    SEQUENTIAL: data streaming; RANDOM: data random access, must waiting for the finishing of all data's tramssion!
    
    
///////////////////////////////////////////////////////////////////////////////////////////
SDSoC Error: can not find function body...
(1) directly include the corresponding header file
(2) delete the hardware function & run the software code, then add the hardware module and run it again
(3) restart SDSoC
(4) delete this project and build a new one...
