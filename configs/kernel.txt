# Basic introduction of kernel configuration
-- $ petalinux-config -c kernel

1. Patch physical to virtual translations at runtime
    ***Address transaltion

2. General setup
    2.1 cross-compiler tool prefix: find aross compiler tolls
    2.2 compile also drivers which will not load - xilinx local version - qppend to the version string
        ***Automatically configued by Petalinux
    2.3 automatically append version infromation to the version string
        ***Kernel compression mode (Gzip)
    2.4 support for paging of anonyous memory: enable swap functioni
    2.5 system V IPC
    2.6 POSIX message queues: allow processes to exchange data in the form of messages
    2.7 Enable process_vm_readv/writev syscalls: adds the system calls process_vm_readv and process_vm_writev which allow a process with the correct privileges to directly read from or write to to another process's address space
    2.8 open by fhandle syscalls: enable track files using handles instead of names
    2.9 uselib syscall: serves to load a shared library to be used by the calling process
    2.10 Auditing support:
        * IRQ, Timer, CPU/Task time and status accounting, RCU
    2.11 Kernel .config support: able to modify the kernel configuration in .config file
    2.12 Enable access to .config through /proc/config.gz
    2.13 Kernel log buffer size: 16->64KB, 17->128KB
    2.14 CPU kernel log buffer size contribution: 13->8KB, 17->28KB
    2.15 control group support: the linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes
    2.16 checkpoint/restore support: add support to checkpoint and restore processes. Checkpointing processes can be used for fault tolerance and/or load balancing
    2.17 namespace support: changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes
    2.18 automatic process group schduling
    2.19 enable deprecated sysfs features to support old userspace tools: creates deprecated symlinks such as the "device"-link, the <subsystem>:<name>-link, and the "bus"-link. It may also add deprecated key in the uevent environment; obsolete now
    2.20 kernel -> user space relay support: enables support for relay interface support in certain file systems (such as debugfs), designed to provide an efficient mechanism for tools and facilities to relay large amounts of data from kernel space to user space.
    2.21 initial RAM filesystem and RAM disk (initramfs/initrd) support: enable a RAM disk that is loaded by the boot loader (loadlin or lilo) and that is mounted as root before the normal boot procedure as the "real" root file system
    2.22 optimized for size: reduce  kernel size
    2.23 configure standard kernel features (expert users): allows certain base kernel options and settings to be disabled or tweaked. This is for specialized environments which can tolerate a "non-standard" kernel. Please only use this if you really know what you are doing.
    2.24 embedded system
    2.25 kernel performance events and counters: enable kernel support for various performance events provided by software and hardware
    2.26 enable VM event counters for /proc/vmstat: allows the disabling of the VM event counters on EXPERT systems. /proc/vmstat will only show page counts if VM event counters are disabled
    2.27 disable heap randomization: changes the bootup default to heap randomization disabled, and can be overridden at runtime by setting /proc/sys/kernel/randomize_va_space to 2
    2.28 choose SLAB allocator: linux memory allocator - SLAB, SLUB, SLOB
    2.29 profiling support: enable the oprofile system
    2.30 kprobes: allows users to trap nearly any kernel address to start a callback function (debugging tool)
    2.31 optimized very unlikely/likely branches: makes branch prediction easier and reduces overhead
    2.32 stack protector buffer overflow detection: none, regular, strong
    2.33 GCOV-based kernel profiling: Using gcov one can find out some basic performance statistics on a per source file level such as:* how often each line of code executes; * what lines of code are actually executed; * how much computing time each section of code uses
    
3. Enable loadable module support
      * module functions, e.g. loading, uploading, versioning, checksum, etc.

4. Enable the block layer
      * block layer configuration, e.g. SG support, data integrity support, command line partition parser, etc.
      
5. System type
      *** choose supported platform
      
6. Bus Support
      * PCI support, e,g, stub driver, IOV support, PRI support, etc.
      
7. Kernel features
      7.1 symmetric multi-processing (SMP): the processing of programs by multiple processors that share a common operating system and memory
      7.2 allow booting SMP kernel on uniprocessor systems (experimental): SMP kernels contain instructions which fail on non-SMP processors. Enabling this option allows the kernel to modify itself to make these instructions safe. If you do not understand it, say Yes for this function
      7.3 support cpu topology definition: support ARM cpu topology definition. The MPIDR register defines affinity between processors which is then used to describe the cpu topology of an ARM System
      7.4 multi-core schdeler support
      7.5 SMT scheduler support
      7.6 architected timer support: provides up to 8 frames with a hysical and optional virtual timer per frame
      7.7 multi-cluster power management: power-efficient scheduling
      7.8 big.LITTLE support (experimental): heterogeneous computing architecture, coupling relatively battery-saving and slower processor cores (LITTLE) with relatively more powerful and power-hungry ones (big)
      7.9 memory split (3G/1G user/kernel split)
      7.10 maximum nember of CPUs (2-32)
      7.11 support for hot-pluggable CPUs
      7.12 support for the ARM power state coordination interface (PSCI): can be used by Linux to initiate various CPU-centric power operations
      7.13 preemption model (preemtion kernel low-latency desktop): RTOS
      7.14 Timer frequency
      7.15 compile the kernel in Thumb-2 mode
      7.16 use the ARM EABI to compile the kernel: only useful if you are using a user space environment that is also compiled with EABI
      7.17 allow old ABI inaries to run with this kernel (experimental): provides a compatibility layer to intercept syscalls that have structure arguments which layout in memory differs between the legacy ABI and the new ARM EABI (only for non "thumb" binaries); but adds a tiny overhead to all syscalls and produces a slightly larger kernel
      7.18 high memory support: linux kernel splits that up 3/1 (could also be 2/2, or 1/3 1) into user space (high memory) and kernel space (low memory) respectively
      7.19 allocate 2nd-level page tables from high memory
      7.20 enable hardware performance counter support for perf events: hardware support for perf events
      7.21 sllow for memory compaction
      7.22 page migration: page migration in multi-core system
      7.23 enable bounce buffers: when data travels between a device and high memory, it is first copied through the bounce buffer
      7.24 enable KSM for page merging: memory-saving de-duplication feature
      7.25 low address space to protect from user allocation (4096)
      7.26 enable cleancache driver to cache clean pages if temporary memory is present
      7.27 enable front swap to cache swap pages if temporary memory is present
      7.28 contiguous memory allocator: allocation of physically-contiguous memory buffer
      7.29 CMA debug messages (development): produces KERN_DEBUG messages for every CMA call as well as various messages while processing calls such as dma_alloc_from_contiguous()
      7.30 maximum count of the CMA areas (7)
      7.31 common API for compressed memory storage: allows using either zbud or zsmalloc
      7.32 low density storage for compressed pages: store up to two compressed pages per physical page
      7.33 memory allocator for compressed pages: constrained memory allocation - zsmalloc
      7.34 use kernel mem{cpy,set}() for {copy_to,clear}_user(): implement faster copy_to_user and clear_user methods for CPU cores where a 8-word STM instruction give significantly higher memory write throughput than a sequence of individual 32bit stores
      7.35 enable section compression to safely compute untrusted bytecode:  using pipes or other transports made available to the process as file descriptors supporting the read/write syscalls
      7.36 xen guest support on ARM: Xen on ARM architecture

8. Boot options:
      * boot settings, e.g. device tree support, kernel parameters, kexec system call, etc.
    
9. CPU power management
      * power management settings
 
10. Floating point emulation
      * VFP-format; Advanced SIMD extention; NEON in kernel mode
   
11. User space binary formats
      * .elf here
      
12. Power management support
      * power efficiency, e.g. hibernation, sleep, wake up mechanism , etc.
      
13. Networking support

14. Device drivers
      *** select drivers you need in your design, e.g. MTD, Block devices, SPI, etc.
      
15. File systems
      *** ext2, ext3, ext4, etc.
      
16. kernel hacking
      * kernel debugging settings

17. Security options
      * security settings/modules
     
18. cryptographyic API

19. library routines
      * CRC checking, XZ decompression, compiled-in fonts
      
20. virtulization
      * emulate the whole physical computer machine
      
    



    
